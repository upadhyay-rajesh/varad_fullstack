how to ise hibernate in project?

step 1 : how to get hibernate in my project?
	add following dependency inside pom.xml file of your project

	<dependency>
    		<groupId>org.hibernate</groupId>
    		<artifactId>hibernate-core</artifactId>
    		<version>5.6.4.Final</version>
	</dependency>
  
  	<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
	<dependency>
    		<groupId>org.hibernate</groupId>
    		<artifactId>hibernate-entitymanager</artifactId>
    		<version>5.6.4.Final</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc6 -->
	<dependency>
    		<groupId>com.oracle.database.jdbc</groupId>
    		<artifactId>ojdbc6</artifactId>
    		<version>11.2.0.4</version>
	</dependency>


step 2 : how to configure hibernate for database?
	download hibernate.cfg.xml file and provide information according to your database

	<?xml version="1.0" encoding="utf-8"?>
	<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
	<hibernate-configuration>
	 <session-factory>
  		<property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
  		<property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
  		<property name="hibernate.connection.username">system</property>
  		<property name="hibernate.connection.password">rajesh</property>
  		<property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
 
  		<property name="show_sql">true</property>
		 <!-- this line first will check table is in database or not , if table will not be there then it will create table otherwise will not do anything -->
   		<property name="hbm2ddl.auto">update</property>

		<!-- this will decide which class object will store -->
 		<mapping class="com.varadweb.entity.FacebookEntity"></mapping>
	 </session-factory>
	</hibernate-configuration>

step 3 : which entity class object, hibernate will store in database?
	public class FacebookEntity {}

step 4 : how to map entity on table?
	  create table FacebookEntity(name varchar(23),password varchar(23),email varchar(23) primary key,address varchar(23));

	 add @Entity above to the class and @Id above to the primary key field like email.

	package com.varadweb.entity;

	import javax.persistence.Entity;
	import javax.persistence.Id;

	@Entity
		public class FacebookEntity {
		private String name;
		private String password;
	
		@Id  //it indicate that email will be primary key
		private String email;
		private String address;
	}

step 5 : how to use hibernate?
	  in dao file we will write following line for all work
	  
	  SessionFactory sf=new Configuration().configure().buildSessionFactory();
	  Session ss=sf.openSession();

	example :
	public int createProfileDAO(FacebookEntity fb) {
		int i=0;
		/*try {
			//load driver
			Class.forName("oracle.jdbc.driver.OracleDriver");
			//create connection
			Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","rajesh");
			//create query
			PreparedStatement ps=con.prepareStatement("insert into facebooknewvarad values(?,?,?,?)");
			ps.setString(1, fb.getName());
			ps.setString(2, fb.getPassword());
			ps.setString(3, fb.getEmail());
			ps.setString(4, fb.getAddress());
			
			i=ps.executeUpdate();
			
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}*/
		
		//configure method will load hibernate.cfg.xml file 
		//buildSessionFactory() method will take all information from hibernate.cfg.xml file and create database connection , table
		//SessionFactory class is singleton and thread safe
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		//to do every work we have to create separate Session object
		Session ss=sf.openSession();
		
		//EntityTransaction will save data permanently inside database otherwise data will be into RAM but will not saved inside database
		//begin() method will start transaction and commit() method will save data into database
		EntityTransaction et=ss.getTransaction();
		et.begin();
		//save method internally use insert query and will insert data into table
			ss.save(fb);
		
		
		et.commit();
		i=1;
		
		return i;
	}











